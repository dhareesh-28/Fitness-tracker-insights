# -*- coding: utf-8 -*-
"""Untitled50.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nq-MWVPEX_XB-IGChC7_aIYzxj5yBb4F
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import statsmodels.api as sm  # Required for trendline fitting

# Load the data function
def load_data():
    # Load the data from your CSV
    df = pd.read_csv(r'c:\\Users\\lenovo\\venv\\Scripts\\fti ds.csv')

    # Ensure the 'dates' column is in datetime format
    df['dates'] = pd.to_datetime(df['dates'])

    return df

# Load the dataframe
df = load_data()

# Initialize session state for navigation
if 'page' not in st.session_state:
    st.session_state.page = 'Home'

# Function to set the current page
def set_page(page_name):
    st.session_state.page = page_name

# Header with Logo and Title
st.markdown("""
    <div style="text-align: center;">
        <img src="https://plus.unsplash.com/premium_photo-1681433383783-661b519b154a?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8Zml0bmVzcyUyMHRyYWNrZXJ8ZW58MHx8MHx8fDA%3D" alt="Logo" style="width:150px;">
        <h1 style="color:#0A74DA;">Fitness Tracker Insights</h1>
        <p>Your data-driven fitness companion</p>
    </div>
    """, unsafe_allow_html=True)

# Navigation Buttons
st.markdown("<hr>", unsafe_allow_html=True)
col1, col2, col3, col4, col5 = st.columns([1,1,1,1,1])
with col1:
    if st.button("üè† Home"):
        set_page('Home')
with col2:
    if st.button("üìà Data Overview"):
        set_page('Data Overview')
with col3:
    if st.button("üìä Activity Analysis"):
        set_page('Activity Analysis')
with col4:
    if st.button("‚ù§Ô∏è Health Metrics"):
        set_page('Health Metrics')
with col5:
    if st.button("üõå Sleep Analysis"):
        set_page('Sleep Analysis')
st.markdown("<hr>", unsafe_allow_html=True)

# Home Page
def home_page():
    st.title("Welcome to Fitness Tracker Insights üè†")
    st.write("""
    This dashboard provides a comprehensive overview of your fitness data, allowing you to monitor and analyze various health and activity metrics. Navigate through the sections using the buttons above to explore different aspects of your fitness journey.
    """)
    st.balloons()

# Data Overview Page
def data_overview_page():
    st.title("Data Overview üìà")
    st.subheader("Raw Data")
    st.dataframe(df)
    st.subheader("Basic Statistics")
    st.dataframe(df.describe())

# Activity Analysis Page
def activity_analysis_page():
    st.title("Activity Analysis üìä")

    # Steps vs Calories Burned
    st.subheader("Steps Count vs. Calories Burned")
    fig_steps_cal = px.scatter(
        df,
        x='steps_count',
        y='calories_burned',
        hover_data=['dates'],
        labels={'steps_count': 'Steps Count', 'calories_burned': 'Calories Burned'},
        title='Calories Burned vs. Steps Count',
        trendline='ols',  # This requires statsmodels
        color='steps_count',
        color_continuous_scale='Viridis'
    )
    st.plotly_chart(fig_steps_cal, use_container_width=True)

    # Activity Trends with Metrics
    st.subheader("Activity Trends")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Average Daily Steps", f"{int(df['steps_count'].mean()):,}")
        st.metric("Max Steps", f"{int(df['steps_count'].max()):,}")
    with col2:
        st.metric("Average Calories Burned", f"{int(df['calories_burned'].mean()):,}")
        st.metric("Max Calories Burned", f"{int(df['calories_burned'].max()):,}")

# Health Metrics Page
def health_metrics_page():
    st.title("Health Metrics ‚ù§Ô∏è")
    # Heart Rate Trends
    st.subheader("Heart Rate Trends")
    fig_hr = px.line(
        df,
        x='dates',
        y='average_heart_rate',
        labels={'dates': 'Date', 'average_heart_rate': 'Heart Rate (BPM)'},
        title='Average Heart Rate Over Time',
        hover_data={'dates': '|%B %d, %Y'}
    )
    fig_hr.update_traces(mode='lines+markers', line=dict(color='red'))
    st.plotly_chart(fig_hr, use_container_width=True)

    # Hydration Level
    st.subheader("Hydration Level")
    fig_hydration = px.bar(
        df,
        x='dates',
        y='hydration_level',
        labels={'dates': 'Date', 'hydration_level': 'Hydration Level (%)'},
        title='Daily Hydration Levels',
        hover_data=['dates', 'hydration_level'],
        color='hydration_level',
        color_continuous_scale='Blues'
    )
    st.plotly_chart(fig_hydration, use_container_width=True)

    # Temperature vs Heart Rate
    st.subheader("Temperature vs Heart Rate")
    fig_temp_hr = px.scatter(
        df,
        x='average_temperature',
        y='average_heart_rate',
        hover_data=['dates'],
        labels={'average_temperature': 'Temperature (¬∞C)', 'average_heart_rate': 'Heart Rate (BPM)'},
        title='Temperature vs. Heart Rate',
        color='average_temperature',
        color_continuous_scale='Hot'
    )
    st.plotly_chart(fig_temp_hr, use_container_width=True)

# Sleep Analysis Page
def sleep_analysis_page():
    st.title("Sleep Analysis üõå")

    # Sleep Duration Over Time
    st.subheader("Sleep Duration Over Time")
    fig_sleep_time = px.line(
        df,
        x='dates',
        y='hours_of_sleep',
        labels={'dates': 'Date', 'hours_of_sleep': 'Hours of Sleep'},
        title='Daily Sleep Duration',
        hover_data={'dates': '|%B %d, %Y'}
    )
    fig_sleep_time.update_traces(mode='lines+markers', line=dict(color='purple'))
    st.plotly_chart(fig_sleep_time, use_container_width=True)

    # Sleep vs Activity Level
    st.subheader("Sleep vs Activity Level")
    fig_sleep_activity = px.scatter(
        df,
        x='steps_count',
        y='hours_of_sleep',
        hover_data=['dates'],
        labels={'steps_count': 'Steps Count', 'hours_of_sleep': 'Hours of Sleep'},
        title='Sleep Duration vs. Steps Count',
        trendline='ols',  # This requires statsmodels
        color='hours_of_sleep',
        color_continuous_scale='Sunset'
    )
    st.plotly_chart(fig_sleep_activity, use_container_width=True)

    # Sleep Statistics with Metrics
    st.subheader("Sleep Statistics")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Average Sleep Duration", f"{df['hours_of_sleep'].mean():.1f} hours")
    with col2:
        st.metric("Best Sleep Duration", f"{df['hours_of_sleep'].max():.1f} hours")
    with col3:
        st.metric("Worst Sleep Duration", f"{df['hours_of_sleep'].min():.1f} hours")

# Mapping pages to their respective functions
page_functions = {
    'Home': home_page,
    'Data Overview': data_overview_page,
    'Activity Analysis': activity_analysis_page,
    'Health Metrics': health_metrics_page,
    'Sleep Analysis': sleep_analysis_page
}

# Display the selected page
if st.session_state.page in page_functions:
    page_functions[st.session_state.page]()
else:
    home_page()